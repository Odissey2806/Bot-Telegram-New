package pro.sky.telegrambot.service;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.SendResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import pro.sky.telegrambot.exception.ReminderParseException;
import pro.sky.telegrambot.model.NotificationTask;
import pro.sky.telegrambot.repository.NotificationTaskRepository;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class NotificationTaskServiceTest {

    @Mock
    private NotificationTaskRepository repository;

    @Mock
    private TelegramBot telegramBot;

    @InjectMocks
    private NotificationTaskService service;

    @Test
    void processMessage_ValidInput_CreatesTask() {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        String validMessage = "31.12.2023 23:59 –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å –ù–ì";
        when(telegramBot.execute(any(SendMessage.class)))
                .thenReturn(mock(SendResponse.class));

        // –î–µ–π—Å—Ç–≤–∏–µ
        service.processMessage(123L, validMessage);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞
        verify(repository, times(1)).save(any(NotificationTask.class));
    }

    @Test
    void processMessage_InvalidFormat_ThrowsException() {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        String invalidMessage = "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç";

        // –î–µ–π—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
        Exception exception = assertThrows(ReminderParseException.class,
                () -> service.processMessage(123L, invalidMessage));

        assertTrue(exception.getMessage().contains("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"));
    }

    @Test
    void checkReminders_FindsDueTasks_SendsMessages() {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        NotificationTask task = new NotificationTask();
        task.setChatId(123L);
        task.setMessage("–¢–µ—Å—Ç");
        task.setReminderTime(LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES));

        when(repository.findByReminderTimeAndIsSentFalse(any(LocalDateTime.class)))
                .thenReturn(Collections.singletonList(task));
        when(telegramBot.execute(any(SendMessage.class)))
                .thenReturn(mock(SendResponse.class));

        // –î–µ–π—Å—Ç–≤–∏–µ
        service.checkReminders();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        ArgumentCaptor<SendMessage> messageCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramBot).execute(messageCaptor.capture());

        SendMessage actualMessage = messageCaptor.getValue();
        assertEquals(task.getChatId(), actualMessage.getParameters().get("chat_id"));
        assertEquals("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + task.getMessage(), actualMessage.getParameters().get("text"));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        assertTrue(task.isSent());
        verify(repository).save(task);
    }
}